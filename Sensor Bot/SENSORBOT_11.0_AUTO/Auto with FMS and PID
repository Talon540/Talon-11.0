package org.usfirst.frc.team540.robot;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends IterativeRobot {
	private static final String BaselineLeft = "Baseline Left";
	private static final String BaselineRight = "Baseline Right";
	private static final String BaselineMiddle = "Baseline Middle";

	private String m_autoSelected;
	private SendableChooser<String> m_chooser = new SendableChooser<>();

	Talon frontLeft, frontRight, backLeft, backRight;
	ADXRS450_Gyro gyro;
	String gameData;
	Encoder myEnc;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		m_chooser.addObject("Default Auto", BaselineLeft);
		m_chooser.addObject("My Auto", BaselineRight);
		m_chooser.addObject("Baseline Middle", BaselineMiddle);
		SmartDashboard.putData("Auto choices", m_chooser);

		frontLeft = new Talon(3);
		frontRight = new Talon(1);
		backLeft = new Talon(4);
		backRight = new Talon(2);

		// gyroscope
		gyro = new ADXRS450_Gyro();
		gyro.reset();

		// encoders
		myEnc = new Encoder(0, 1, false, Encoder.EncodingType.k4X);
		myEnc.setMaxPeriod(0.1);
		myEnc.setMinRate(5);
		myEnc.setDistancePerPulse(4);
		myEnc.setSamplesToAverage(10);

		double gyroValue = gyro.getAngle();
		// Outputs gyro values to the dashboard
		SmartDashboard.putNumber("Gyro: ", gyroValue);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * <p>
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		m_autoSelected = m_chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + m_autoSelected);
		gyro.reset();
	}

	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic() {

		gameData = DriverStation.getInstance().getGameSpecificMessage();
		double distance = myEnc.getDistance();

		/*
		 * Will be a String containing 3 characters, either 'L' or 'R', which
		 * indicate which side of the switch or scale is ours in the order: our
		 * switch -> scale -> their switch
		 */
		SmartDashboard.putString("Our switch plate sides: ", gameData);

		// Replaces L with R and R with L to generate the other alliance's
		// gameData
		String invertedGameData = gameData.replace('L', 'E');
		invertedGameData = invertedGameData.replace('R', 'L');
		invertedGameData = invertedGameData.replace('E', 'R');
		SmartDashboard.putString("Their switch plate sides:", invertedGameData);

		double gyroValue = gyro.getAngle();
		// Outputs gyro values to the dashboard
		SmartDashboard.putNumber("Gyro: ", gyroValue);

		switch (m_autoSelected) {
		case BaselineLeft:

			if (gameData.charAt(0) == 'L') {
				if (gyroValue >= 0) {
					frontRight.set(0);
					backRight.set(0);
					frontLeft.set(0);
					backLeft.set(0);
				} else {
					frontRight.set(propgyro(0, gyroValue) * -.32);
					backRight.set(propgyro(0, gyroValue) * -.32);
					frontLeft.set(propgyro(0, gyroValue) * .365);
					backLeft.set(propgyro(0, gyroValue) * .365);
				}

				/*
				 * if (distance <= 10) { frontRight.set(propencoder1(10,
				 * distance) * 1); backRight.set(propencoder1(10, distance) *
				 * 1); frontLeft.set(propencoder1(10, distance) * 1);
				 * backLeft.set(propencoder1(10, distance) * 1); } else {
				 * frontRight.set(0); backRight.set(0); frontLeft.set(0);
				 * backLeft.set(0); }
				 */

			} else {

				if (gyroValue >= -30) {
					frontRight.set(0);
					backRight.set(0);
					frontLeft.set(0);
					backLeft.set(0);
				} else {
					frontRight.set(propgyro(-30, gyroValue) * .32);
					backRight.set(propgyro(30, gyroValue) * .32);
					frontLeft.set(propgyro(30, gyroValue) * .365);
					backLeft.set(propgyro(30, gyroValue) * .365);
				}

				/*
				 * if (distance <= 10) { frontRight.set(propencoder1(10,
				 * distance) * 1); backRight.set(propencoder1(10, distance) *
				 * 1); frontLeft.set(propencoder1(10, distance) * 1);
				 * backLeft.set(propencoder1(10, distance) * 1); } else {
				 * frontRight.set(0); backRight.set(0); frontLeft.set(0);
				 * backLeft.set(0); }
				 */

			}

			break;
		case BaselineRight:
		default:

			if (gameData.charAt(2) == 'L') {

				if (gyroValue >= 30) {
					frontRight.set(0);
					backRight.set(0);
					frontLeft.set(0);
					backLeft.set(0);
				} else {
					frontRight.set(propgyro(30, gyroValue) * -.32);
					backRight.set(propgyro(30, gyroValue) * -.32);
					frontLeft.set(propgyro(30, gyroValue) * -.365);
					backLeft.set(propgyro(30, gyroValue) * -.365);
				}

				/*
				 * if (distance <= 10) { frontRight.set(propencoder1(10,
				 * distance) * 1); backRight.set(propencoder1(10, distance) *
				 * 1); frontLeft.set(propencoder1(10, distance) * 1);
				 * backLeft.set(propencoder1(10, distance) * 1); } else {
				 * frontRight.set(0); backRight.set(0); frontLeft.set(0);
				 * backLeft.set(0); }
				 */

			} else {

				if (gyroValue >= 0) {
					frontRight.set(0);
					backRight.set(0);
					frontLeft.set(0);
					backLeft.set(0);
				} else {
					frontRight.set(propgyro(0, gyroValue) * -.32);
					backRight.set(propgyro(0, gyroValue) * -.32);
					frontLeft.set(propgyro(0, gyroValue) * .365);
					backLeft.set(propgyro(0, gyroValue) * .365);
				}

				/*
				 * if (distance <= 10) { frontRight.set(propencoder1(10,
				 * distance) * .1); backRight.set(propencoder1(10, distance) *
				 * .1); frontLeft.set(propencoder1(10, distance) * 1);
				 * backLeft.set(propencoder1(10, distance) * 1); } else {
				 * frontRight.set(0); backRight.set(0); frontLeft.set(0);
				 * backLeft.set(0); }
				 */
			}

			break;
		}

	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopPeriodic() {
		double gyroValue = gyro.getAngle();
		// Outputs gyro values to the dashboard
		SmartDashboard.putNumber("Gyro: ", gyroValue);
	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}

	/**
	 * 
	 * @param target
	 *            the target value to reach
	 * @param gyro
	 *            the current gyro value
	 * @return the speed coefficient from 1 to 0
	 */

	public static double propgyro(double targetgyro, double gyro) {
		return (targetgyro - gyro) / targetgyro;
	}

	/**
	 * 
	 * @param target
	 *            the target value to reach
	 * @param encoder
	 *            the current encoder value
	 * @return the speed coefficient from 1 to 0
	 */

	public static double propencoder1(double targetenc, double encoder) {
		return (targetenc - encoder) / targetenc;
	}
}
