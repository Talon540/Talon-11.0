/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package org.usfirst.frc.team540.robot;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends IterativeRobot {
	private static final String kDefaultAuto = "Default";
	private static final String kCustomAuto = "My Auto";
	private String m_autoSelected;
	private SendableChooser<String> m_chooser = new SendableChooser<>();

	Talon frontLeft, frontRight, backLeft, backRight;
	ADXRS450_Gyro gyro;

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		m_chooser.addDefault("Default Auto", kDefaultAuto);
		m_chooser.addObject("My Auto", kCustomAuto);
		SmartDashboard.putData("Auto choices", m_chooser);

		frontLeft = new Talon(3);
		frontRight = new Talon(1);
		backLeft = new Talon(4);
		backRight = new Talon(2);

		// gyroscope
		gyro = new ADXRS450_Gyro();
		gyro.reset();

		double gyroValue = gyro.getAngle();
		// Outputs gyro values to the dashboard
		SmartDashboard.putNumber("Gyro: ", gyroValue);
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * <p>
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		m_autoSelected = m_chooser.getSelected();
		// autoSelected = SmartDashboard.getString("Auto Selector",
		// defaultAuto);
		System.out.println("Auto selected: " + m_autoSelected);
		gyro.reset();
	}

	/**
	 * This function is called periodically during autonomous.
	 */
	@Override
	public void autonomousPeriodic() {

		double gyroValue = gyro.getAngle();
		// Outputs gyro values to the dashboard
		SmartDashboard.putNumber("Gyro: ", gyroValue);

		switch (m_autoSelected) {
		case kCustomAuto:
			if (gyroValue >= 90) {
				frontRight.set(0);
				backRight.set(0);
				frontLeft.set(0);
				backLeft.set(0);
			} else {
				frontRight.set(prop(90, gyroValue) * .32);
				backRight.set(prop(90, gyroValue) * .32);
				frontLeft.set(prop(90, gyroValue) * .365);
				backLeft.set(prop(90, gyroValue) * .365);
			}

			break;
		case kDefaultAuto:
		default:

			if (gyroValue >= 90) {
				frontRight.set(0);
				backRight.set(0);
				frontLeft.set(0);
				backLeft.set(0);
			} else {
				frontRight.set(prop(90, gyroValue) * .32);
				backRight.set(prop(90, gyroValue) * .32);
				frontLeft.set(prop(90, gyroValue) * .365);
				backLeft.set(prop(90, gyroValue) * .365);
			}
			break;
		}
	}

	/**
	 * This function is called periodically during operator control.
	 */
	@Override
	public void teleopPeriodic() {
		double gyroValue = gyro.getAngle();
		// Outputs gyro values to the dashboard
		SmartDashboard.putNumber("Gyro: ", gyroValue);
	}

	/**
	 * This function is called periodically during test mode.
	 */
	@Override
	public void testPeriodic() {
	}

	/**
	 * 
	 * @param target
	 *            the target value to reach
	 * @param gyro
	 *            the current gyro value
	 * @return the speed coefficient from 1 to 0
	 */
	public static double prop(double target, double gyro) {
		return (target - gyro) / target;
	}
}
